// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("volunteer") // "vendor" or "volunteer"
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  donations     Donation[]  @relation("DonorDonations")
  pickups       Pickup[]    @relation("VolunteerPickups")
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Donation {
  id          String   @id @default(cuid())
  title       String
  description String?
  quantity    Int
  expiryDate  DateTime
  status      String   @default("available") // available, claimed, completed, expired
  location    String
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  donorId     String
  donor       User     @relation("DonorDonations", fields: [donorId], references: [id])
  pickup      Pickup?
}

model Pickup {
  id         String   @id @default(cuid())
  status     String   @default("pending") // pending, in_progress, completed, cancelled
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  donationId String   @unique
  donation   Donation @relation(fields: [donationId], references: [id])
  
  volunteerId String
  volunteer   User     @relation("VolunteerPickups", fields: [volunteerId], references: [id])
} 